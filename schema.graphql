type Bookmark {
  archived: Boolean!
  favorite: Boolean!
  id: ID!

  # Owner of this bookmark
  owner: User

  # Tags on this bookmark
  tags: [Tag]
  title: String!
  url: String!
}

type Mutation {
  # Add a tag to a bookmark
  addTag(input: addTagInput!): addTagPayload

  # Create a bookmark
  createBookmark(input: createBookmarkInput!): createBookmarkPayload

  # Create a tag
  createTag(input: createTagInput!): createTagPayload

  # Delete a bookmark
  deleteBookmark(input: deleteBookmarkInput!): deleteBookmarkPayload

  # Delete a tag
  deleteTag(input: deleteTagInput!): deleteTagPayload

  # Remove a tag from a bookmark
  removeTag(input: removeTagInput!): removeTagPayload

  # Update a bookmark
  updateBookmark(input: updateBookmarkInput!): updateBookmarkPayload
}

type Query {
  # Return a bookmark by id
  bookmark(id: ID): Bookmark

  # Return paginated bookmarks collection
  bookmarks(limit: Int = 10, page: Int = 1, tag: ID): [Bookmark]

  # Return paginated tags collection
  tags(limit: Int = 10, page: Int = 1): [Tag]

  # Return the current user
  user: User
}

type Tag {
  archived: Boolean!
  favorite: Boolean!
  id: ID!
  name: String!

  # Owner of this tag
  owner: User
}

type User {
  email: String!
  first_name: String!
  id: String!
  last_name: String!
}

# Autogenerated input type of addTag
input addTagInput {
  bookmarkId: ID

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  tagIds: [ID]
}

# Autogenerated return type of addTag
type addTagPayload {
  bookmark: Bookmark

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of createBookmark
input createBookmarkInput {
  archived: Boolean

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  favorite: Boolean
  title: String
  url: String
}

# Autogenerated return type of createBookmark
type createBookmarkPayload {
  bookmark: Bookmark

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of createTag
input createTagInput {
  archived: Boolean

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  favorite: Boolean
  name: String
}

# Autogenerated return type of createTag
type createTagPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  tag: Tag
}

# Autogenerated input type of deleteBookmark
input deleteBookmarkInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
}

# Autogenerated return type of deleteBookmark
type deleteBookmarkPayload {
  bookmark: Bookmark

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of deleteTag
input deleteTagInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
}

# Autogenerated return type of deleteTag
type deleteTagPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  tag: Tag
}

# Autogenerated input type of removeTag
input removeTagInput {
  bookmarkId: ID

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  tagId: ID
}

# Autogenerated return type of removeTag
type removeTagPayload {
  bookmark: Bookmark

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of updateBookmark
input updateBookmarkInput {
  archived: Boolean

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  favorite: Boolean
  id: ID
  title: String
  url: String
}

# Autogenerated return type of updateBookmark
type updateBookmarkPayload {
  bookmark: Bookmark

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}